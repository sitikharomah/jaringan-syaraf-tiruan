{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNNUZITvadrkr49062nHw1b",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/sitikharomah/jaringan-syaraf-tiruan/blob/main/Backpropagation.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TCC_657HQel2",
        "outputId": "9689e995-b8d5-4db2-82c9-c4b2095e324c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 1. Import library yang diperlukan\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.datasets import load_iris\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "from sklearn.metrics import confusion_matrix, accuracy_score\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns"
      ],
      "metadata": {
        "id": "bsueJE2qQrpS"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 2. Load dataset Iris\n",
        "iris= load_iris ()\n",
        "X = iris['data'] #Fitur: sepal length, sepal width, petal length, petal width\n",
        "y = iris['target'].reshape(-1, 1) # Target: Kelas (Setosa, Versicolor, Virginica)"
      ],
      "metadata": {
        "id": "R71xCcWYQwTw"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 3. Preprocessing data\n",
        "# One hot encoding untuk target (karena kita punya 3 kelas)\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "encoder = OneHotEncoder(sparse_output=False) #sparse_output=False untuk sklearn versi terbaru\n",
        "y_encoded = encoder.fit_transform(y)\n",
        "\n",
        "# Split data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split (X, y_encoded, test_size=0.2, random_state=42)\n",
        "\n",
        "# Tampilkan beberapa data latih\n",
        "train_data = pd.DataFrame (X_train, columns=iris ['feature_names'])\n",
        "train_data['target'] = np.argmax (y_train, axis=1) #Tambahkan kolom target\n",
        "train_data['target_name'] = train_data['target'].apply(lambda x:\n",
        "iris['target_names'] [x]) #Tambahkan nama target\n",
        "print (\"Data Latih:\")\n",
        "print (train_data.head()) #Tampilkan 5 data pertama\n",
        "\n",
        "# Tampilkan beberapa data latih\n",
        "train_data = pd.DataFrame (X_train, columns=iris ['feature_names'])\n",
        "train_data['target'] = np.argmax (y_train, axis=1) #Tambahkan kolom target\n",
        "train_data['target_name'] = train_data['target'].apply(lambda x:\n",
        "iris['target_names'] [x]) #Tambahkan nama target\n",
        "print (\"Data Latih:\")\n",
        "print (train_data.head()) #Tampilkan 5 data pertama\n",
        "\n",
        "# Tampilkan beberapa data uji\n",
        "test_data = pd.DataFrame (X_test, columns=iris['feature_names'])\n",
        "test_data['target'] = np.argmax (y_test, axis=1) # Tambahkan kolom target\n",
        "test_data['target_name'] = test_data['target'].apply(lambda x:\n",
        "iris['target_names'] [x]) #Tambahkan nama target\n",
        "print (\"\\nData Uji:\")\n",
        "print (test_data.head()) #Tampilkan 5 data pertama"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GfTFXNCWRAWY",
        "outputId": "e6b90c0e-e669-41cd-9b22-4884ce5ff45c"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Data Latih:\n",
            "   sepal length (cm)  sepal width (cm)  petal length (cm)  petal width (cm)  \\\n",
            "0                4.6               3.6                1.0               0.2   \n",
            "1                5.7               4.4                1.5               0.4   \n",
            "2                6.7               3.1                4.4               1.4   \n",
            "3                4.8               3.4                1.6               0.2   \n",
            "4                4.4               3.2                1.3               0.2   \n",
            "\n",
            "   target target_name  \n",
            "0       0      setosa  \n",
            "1       0      setosa  \n",
            "2       1  versicolor  \n",
            "3       0      setosa  \n",
            "4       0      setosa  \n",
            "Data Latih:\n",
            "   sepal length (cm)  sepal width (cm)  petal length (cm)  petal width (cm)  \\\n",
            "0                4.6               3.6                1.0               0.2   \n",
            "1                5.7               4.4                1.5               0.4   \n",
            "2                6.7               3.1                4.4               1.4   \n",
            "3                4.8               3.4                1.6               0.2   \n",
            "4                4.4               3.2                1.3               0.2   \n",
            "\n",
            "   target target_name  \n",
            "0       0      setosa  \n",
            "1       0      setosa  \n",
            "2       1  versicolor  \n",
            "3       0      setosa  \n",
            "4       0      setosa  \n",
            "\n",
            "Data Uji:\n",
            "   sepal length (cm)  sepal width (cm)  petal length (cm)  petal width (cm)  \\\n",
            "0                6.1               2.8                4.7               1.2   \n",
            "1                5.7               3.8                1.7               0.3   \n",
            "2                7.7               2.6                6.9               2.3   \n",
            "3                6.0               2.9                4.5               1.5   \n",
            "4                6.8               2.8                4.8               1.4   \n",
            "\n",
            "   target target_name  \n",
            "0       1  versicolor  \n",
            "1       0      setosa  \n",
            "2       2   virginica  \n",
            "3       1  versicolor  \n",
            "4       1  versicolor  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 4. Membangun jaringan neural sederhana (1 Hidden Layer)\n",
        "input_neurons = X_train.shape[1] # 4 features (input layer)\n",
        "hidden_neurons = 5  # 5 neurons in the hidden layer\n",
        "output_neurons = y_train.shape[1] # 3 output (kelas bunga)\n",
        "\n",
        "# Bobot random inisialisasi\n",
        "np.random.seed(42)\n",
        "W1 = np.random.randn (input_neurons, hidden_neurons)\n",
        "bl = np.zeros((1, hidden_neurons))\n",
        "W2 = np.random.randn (hidden_neurons, output_neurons)\n",
        "b2= np.zeros((1, output_neurons))\n",
        "\n",
        "# Fungsi aktivasi: Sigmoid\n",
        "def sigmoid (x):\n",
        "  return 1 / (1 + np.exp(-x))\n",
        "def sigmoid_derivative (x):\n",
        "  return x * (1-x)"
      ],
      "metadata": {
        "id": "6KowwqrPRpmh"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#5. Forward propagation\n",
        "def forward_propagation (X):\n",
        "  Z1 = np.dot (X, W1) + bl\n",
        "  A1 = sigmoid(Z1)\n",
        "  Z2 = np.dot(A1, W2) + b2\n",
        "  A2 = sigmoid(Z2)\n",
        "  return Z1, A1, Z2, A2"
      ],
      "metadata": {
        "id": "EsFsCV7tR9ol"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 6. Backward propagation (perbarui bobot)\n",
        "def backward_propagation(x, y, Z1, A1, Z2, A2, learning_rate):\n",
        "  global W1, bl, W2, b2  # Deklarasi variabel global sebelum digunakan\n",
        "  # Error di output\n",
        "  dZ2 = A2 - y\n",
        "  dW2 = np.dot(A1.T, dZ2)\n",
        "  db2 = np.sum(dZ2, axis=0, keepdims=True)\n",
        "\n",
        "  # Error di hidden layer\n",
        "  dZ1 = np.dot(dZ2, W2.T) * sigmoid_derivative(A1)\n",
        "  dW1 = np.dot(x.T, dZ1)\n",
        "  db1 = np.sum(dZ1, axis=0, keepdims=True)\n",
        "\n",
        "  # Perbarui bobot dan bias\n",
        "  W1 = W1 - learning_rate * dW1\n",
        "  bl = bl - learning_rate * db1 # bl was originally b1, causing an error since b1 is not defined.\n",
        "                                # Changing this to bl will fix the error as bl is a global variable defined earlier.\n",
        "  W2 = W2 - learning_rate * dW2\n",
        "  b2 = b2 - learning_rate * db2\n",
        "\n",
        "  return W1, bl, W2, b2 # Return bl instead of b1"
      ],
      "metadata": {
        "id": "lJau9bF8SGiB"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#7. Training (pelatihan)\n",
        "def train (X, y, iterations, learning_rate):\n",
        "  for i in range (iterations):\n",
        "    Z1, A1, Z2, A2 = forward_propagation (X)\n",
        "    backward_propagation (X, y, Z1, A1, Z2, A2, learning_rate) # Changed Y to y\n",
        "\n",
        "    # Cetak loss (Mean Squared Error) setiap iterasi\n",
        "    loss = np.mean (np.square (y - A2))\n",
        "    print (f'Iteration {i+1}, Loss: {loss}') # Added curly braces for f-string\n",
        "\n",
        "# Melatih jaringan (10 iterasi, learning rate 0.01)\n",
        "train (X_train, y_train, iterations=10, learning_rate=0.01)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "g3qBfiA8SKQq",
        "outputId": "aabf57ab-996d-4ce5-c431-7fdcdb4e630e"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Iteration 1, Loss: 0.30105161691576526\n",
            "Iteration 2, Loss: 0.2147470290657342\n",
            "Iteration 3, Loss: 0.2279568277023176\n",
            "Iteration 4, Loss: 0.2015528448418209\n",
            "Iteration 5, Loss: 0.2333682565266473\n",
            "Iteration 6, Loss: 0.2212312778865197\n",
            "Iteration 7, Loss: 0.2132086408571907\n",
            "Iteration 8, Loss: 0.18519380850510878\n",
            "Iteration 9, Loss: 0.18332685025856202\n",
            "Iteration 10, Loss: 0.21958118723146072\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#8. Testing (pengujian)\n",
        "def predict(X):\n",
        "    Z1, A1, Z2, A2 = forward_propagation(X) # Indented this line by 4 spaces\n",
        "    return np.argmax(A2, axis=1) # Indented this line by 4 spaces\n",
        "\n",
        "# Memprediksi kelas untuk data uji\n",
        "predictions = predict(X_test)\n",
        "\n",
        "# Evaluasi akurasi\n",
        "y_test_labels = np.argmax (y_test, axis=1)\n",
        "accuracy = accuracy_score (y_test_labels, predictions)\n",
        "print (f'Akurasi: {accuracy:.2f}%')\n",
        "\n",
        "# Confusion Matrix\n",
        "conf_matrix = confusion_matrix (y_test_labels, predictions)\n",
        "plt.figure(figsize=(6,4))\n",
        "sns.heatmap(conf_matrix, annot=True, fmt=\"d\", cmap=\"Blues\",\n",
        "xticklabels=iris['target_names'], yticklabels=iris['target_names'])\n",
        "plt.xlabel(\"Predicted\")\n",
        "plt.ylabel(\"Actual\")\n",
        "plt.title(\"Confusion Matrix\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 427
        },
        "id": "Q4anyzjmSRSM",
        "outputId": "6467d68b-9f76-4fd2-c465-0203513299b6"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Akurasi: 0.63%\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x400 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 9. Fungsi untuk prediksi data baru\n",
        "def predict_new_data (new_data):\n",
        "  new_data = np.array (new_data).reshape(1, -1) # Ubah menjadi array 2D\n",
        "  predicted_class = predict (new_data) # Prediksi kelas\n",
        "  class_names = iris['target_names'] # Nama kelas (Setosa, Versicolor, Virginica)\n",
        "  return class_names[predicted_class][0]\n",
        "\n",
        "# Contoh prediksi data baru\n",
        "new_data = [5.1, 3.5, 1.4, 0.2] # Data baru (sepal length, sepal width, petal length, petal width)\n",
        "predicted_class = predict_new_data (new_data)\n",
        "print (f'Data baru: {new_data}, Prediksi Kelas: {predicted_class}')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fvbZIztZSZJf",
        "outputId": "427e3728-06be-44e9-c9fd-d08410dd0471"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Data baru: [5.1, 3.5, 1.4, 0.2], Prediksi Kelas: setosa\n"
          ]
        }
      ]
    }
  ]
}
